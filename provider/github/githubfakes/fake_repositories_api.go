// Code generated by counterfeiter. DO NOT EDIT.
package githubfakes

import (
	"context"
	"sync"

	githuba "github.com/google/go-github/v29/github"
	"github.com/telia-oss/sidecred/provider/github"
)

type FakeRepositoriesAPI struct {
	CreateKeyStub        func(context.Context, string, string, *githuba.Key) (*githuba.Key, *githuba.Response, error)
	createKeyMutex       sync.RWMutex
	createKeyArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *githuba.Key
	}
	createKeyReturns struct {
		result1 *githuba.Key
		result2 *githuba.Response
		result3 error
	}
	createKeyReturnsOnCall map[int]struct {
		result1 *githuba.Key
		result2 *githuba.Response
		result3 error
	}
	DeleteKeyStub        func(context.Context, string, string, int64) (*githuba.Response, error)
	deleteKeyMutex       sync.RWMutex
	deleteKeyArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
	}
	deleteKeyReturns struct {
		result1 *githuba.Response
		result2 error
	}
	deleteKeyReturnsOnCall map[int]struct {
		result1 *githuba.Response
		result2 error
	}
	ListKeysStub        func(context.Context, string, string, *githuba.ListOptions) ([]*githuba.Key, *githuba.Response, error)
	listKeysMutex       sync.RWMutex
	listKeysArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *githuba.ListOptions
	}
	listKeysReturns struct {
		result1 []*githuba.Key
		result2 *githuba.Response
		result3 error
	}
	listKeysReturnsOnCall map[int]struct {
		result1 []*githuba.Key
		result2 *githuba.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepositoriesAPI) CreateKey(arg1 context.Context, arg2 string, arg3 string, arg4 *githuba.Key) (*githuba.Key, *githuba.Response, error) {
	fake.createKeyMutex.Lock()
	ret, specificReturn := fake.createKeyReturnsOnCall[len(fake.createKeyArgsForCall)]
	fake.createKeyArgsForCall = append(fake.createKeyArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *githuba.Key
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("CreateKey", []interface{}{arg1, arg2, arg3, arg4})
	fake.createKeyMutex.Unlock()
	if fake.CreateKeyStub != nil {
		return fake.CreateKeyStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.createKeyReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRepositoriesAPI) CreateKeyCallCount() int {
	fake.createKeyMutex.RLock()
	defer fake.createKeyMutex.RUnlock()
	return len(fake.createKeyArgsForCall)
}

func (fake *FakeRepositoriesAPI) CreateKeyCalls(stub func(context.Context, string, string, *githuba.Key) (*githuba.Key, *githuba.Response, error)) {
	fake.createKeyMutex.Lock()
	defer fake.createKeyMutex.Unlock()
	fake.CreateKeyStub = stub
}

func (fake *FakeRepositoriesAPI) CreateKeyArgsForCall(i int) (context.Context, string, string, *githuba.Key) {
	fake.createKeyMutex.RLock()
	defer fake.createKeyMutex.RUnlock()
	argsForCall := fake.createKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRepositoriesAPI) CreateKeyReturns(result1 *githuba.Key, result2 *githuba.Response, result3 error) {
	fake.createKeyMutex.Lock()
	defer fake.createKeyMutex.Unlock()
	fake.CreateKeyStub = nil
	fake.createKeyReturns = struct {
		result1 *githuba.Key
		result2 *githuba.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRepositoriesAPI) CreateKeyReturnsOnCall(i int, result1 *githuba.Key, result2 *githuba.Response, result3 error) {
	fake.createKeyMutex.Lock()
	defer fake.createKeyMutex.Unlock()
	fake.CreateKeyStub = nil
	if fake.createKeyReturnsOnCall == nil {
		fake.createKeyReturnsOnCall = make(map[int]struct {
			result1 *githuba.Key
			result2 *githuba.Response
			result3 error
		})
	}
	fake.createKeyReturnsOnCall[i] = struct {
		result1 *githuba.Key
		result2 *githuba.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRepositoriesAPI) DeleteKey(arg1 context.Context, arg2 string, arg3 string, arg4 int64) (*githuba.Response, error) {
	fake.deleteKeyMutex.Lock()
	ret, specificReturn := fake.deleteKeyReturnsOnCall[len(fake.deleteKeyArgsForCall)]
	fake.deleteKeyArgsForCall = append(fake.deleteKeyArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DeleteKey", []interface{}{arg1, arg2, arg3, arg4})
	fake.deleteKeyMutex.Unlock()
	if fake.DeleteKeyStub != nil {
		return fake.DeleteKeyStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteKeyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepositoriesAPI) DeleteKeyCallCount() int {
	fake.deleteKeyMutex.RLock()
	defer fake.deleteKeyMutex.RUnlock()
	return len(fake.deleteKeyArgsForCall)
}

func (fake *FakeRepositoriesAPI) DeleteKeyCalls(stub func(context.Context, string, string, int64) (*githuba.Response, error)) {
	fake.deleteKeyMutex.Lock()
	defer fake.deleteKeyMutex.Unlock()
	fake.DeleteKeyStub = stub
}

func (fake *FakeRepositoriesAPI) DeleteKeyArgsForCall(i int) (context.Context, string, string, int64) {
	fake.deleteKeyMutex.RLock()
	defer fake.deleteKeyMutex.RUnlock()
	argsForCall := fake.deleteKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRepositoriesAPI) DeleteKeyReturns(result1 *githuba.Response, result2 error) {
	fake.deleteKeyMutex.Lock()
	defer fake.deleteKeyMutex.Unlock()
	fake.DeleteKeyStub = nil
	fake.deleteKeyReturns = struct {
		result1 *githuba.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeRepositoriesAPI) DeleteKeyReturnsOnCall(i int, result1 *githuba.Response, result2 error) {
	fake.deleteKeyMutex.Lock()
	defer fake.deleteKeyMutex.Unlock()
	fake.DeleteKeyStub = nil
	if fake.deleteKeyReturnsOnCall == nil {
		fake.deleteKeyReturnsOnCall = make(map[int]struct {
			result1 *githuba.Response
			result2 error
		})
	}
	fake.deleteKeyReturnsOnCall[i] = struct {
		result1 *githuba.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeRepositoriesAPI) ListKeys(arg1 context.Context, arg2 string, arg3 string, arg4 *githuba.ListOptions) ([]*githuba.Key, *githuba.Response, error) {
	fake.listKeysMutex.Lock()
	ret, specificReturn := fake.listKeysReturnsOnCall[len(fake.listKeysArgsForCall)]
	fake.listKeysArgsForCall = append(fake.listKeysArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *githuba.ListOptions
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListKeys", []interface{}{arg1, arg2, arg3, arg4})
	fake.listKeysMutex.Unlock()
	if fake.ListKeysStub != nil {
		return fake.ListKeysStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.listKeysReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRepositoriesAPI) ListKeysCallCount() int {
	fake.listKeysMutex.RLock()
	defer fake.listKeysMutex.RUnlock()
	return len(fake.listKeysArgsForCall)
}

func (fake *FakeRepositoriesAPI) ListKeysCalls(stub func(context.Context, string, string, *githuba.ListOptions) ([]*githuba.Key, *githuba.Response, error)) {
	fake.listKeysMutex.Lock()
	defer fake.listKeysMutex.Unlock()
	fake.ListKeysStub = stub
}

func (fake *FakeRepositoriesAPI) ListKeysArgsForCall(i int) (context.Context, string, string, *githuba.ListOptions) {
	fake.listKeysMutex.RLock()
	defer fake.listKeysMutex.RUnlock()
	argsForCall := fake.listKeysArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRepositoriesAPI) ListKeysReturns(result1 []*githuba.Key, result2 *githuba.Response, result3 error) {
	fake.listKeysMutex.Lock()
	defer fake.listKeysMutex.Unlock()
	fake.ListKeysStub = nil
	fake.listKeysReturns = struct {
		result1 []*githuba.Key
		result2 *githuba.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRepositoriesAPI) ListKeysReturnsOnCall(i int, result1 []*githuba.Key, result2 *githuba.Response, result3 error) {
	fake.listKeysMutex.Lock()
	defer fake.listKeysMutex.Unlock()
	fake.ListKeysStub = nil
	if fake.listKeysReturnsOnCall == nil {
		fake.listKeysReturnsOnCall = make(map[int]struct {
			result1 []*githuba.Key
			result2 *githuba.Response
			result3 error
		})
	}
	fake.listKeysReturnsOnCall[i] = struct {
		result1 []*githuba.Key
		result2 *githuba.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRepositoriesAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createKeyMutex.RLock()
	defer fake.createKeyMutex.RUnlock()
	fake.deleteKeyMutex.RLock()
	defer fake.deleteKeyMutex.RUnlock()
	fake.listKeysMutex.RLock()
	defer fake.listKeysMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepositoriesAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ github.RepositoriesAPI = new(FakeRepositoriesAPI)
